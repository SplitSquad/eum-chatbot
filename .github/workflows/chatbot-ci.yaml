name: Chatbot CI to ECR

on:
  push:
    branches:
      - main
    paths:
      - '**'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check directory structure
        run: |
          echo "현재 디렉토리 구조 확인:"
          pwd
          ls -la
          echo "eum-chatbot 디렉토리 확인:"
          if [ -d "eum-chatbot" ]; then
            ls -la eum-chatbot
          else
            echo "eum-chatbot 디렉토리가 없습니다!"
            find . -type d -maxdepth 2
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: 879657431997.dkr.ecr.ap-northeast-2.amazonaws.com
          ECR_REPOSITORY: eum-chatbot
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # 디렉토리 구조 확인
          echo "현재 디렉토리:"
          pwd
          echo "파일 목록:"
          ls -la
          
          # Dockerfile 위치 확인
          if [ -f "Dockerfile" ]; then
            echo "루트 디렉토리에서 Dockerfile을 찾았습니다."
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          elif [ -f "eum-chatbot/Dockerfile" ]; then
            echo "eum-chatbot 디렉토리에서 Dockerfile을 찾았습니다."
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f eum-chatbot/Dockerfile eum-chatbot/
          else
            echo "ERROR: Dockerfile을 찾을 수 없습니다!"
            find . -name "Dockerfile" | sort
            exit 1
          fi
          
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Update Helm Chart
        env:
          ECR_REGISTRY: 879657431997.dkr.ecr.ap-northeast-2.amazonaws.com
          ECR_REPOSITORY: eum-chatbot
          IMAGE_TAG: ${{ github.sha }}
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
          MANIFEST_REPO: ${{ secrets.MANIFEST_REPO }}
        run: |
          # 매니페스트 레포지토리 클론
          git clone https://${GIT_USERNAME}:${GIT_TOKEN}@${MANIFEST_REPO} manifest-repo
          
          # 디렉토리 구조 확인 (디버깅 용도)
          echo "매니페스트 레포지토리 디렉토리 구조:"
          ls -la manifest-repo
          
          # helm-charts/eum-ai 디렉토리로 이동
          cd manifest-repo/helm-charts/eum-ai || { echo "helm-charts/eum-ai 디렉토리가 없습니다"; exit 1; }
          
          # values.yaml 파일이 있는지 확인하고 이미지 태그 업데이트
          if [ -f "values.yaml" ]; then
            echo "values.yaml 파일 발견 - 이미지 태그 업데이트 중..."
            # 이미지 리포지토리와 태그 업데이트
            yq eval ".image.repository = \"${ECR_REGISTRY}/${ECR_REPOSITORY}\"" -i values.yaml
            yq eval ".image.tag = \"${IMAGE_TAG}\"" -i values.yaml
            
            echo "업데이트된 이미지 설정:"
            yq eval ".image" values.yaml
          else
            echo "ERROR: values.yaml 파일을 찾을 수 없습니다!"
            echo "현재 디렉토리: $(pwd)"
            echo "디렉토리 내용:"
            ls -la
            exit 1
          fi
          
          # 변경사항 커밋 및 푸시
          cd ../../..  # 매니페스트 레포지토리 루트로 이동
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Update chatbot image to ${IMAGE_TAG} in Helm chart"
          git push
          
          echo "Helm 차트 업데이트 완료: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "ArgoCD가 변경사항을 감지하여 자동으로 배포할 예정입니다." 